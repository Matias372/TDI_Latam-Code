import json
import os
from getpass import getpass
from .constants import CONFIG_FILE
from utils.file_utils import FileUtils

class ConfigManager:
    def __init__(self):
        self.api_key = None
        self.freshdesk_domain = None
        self.clarity_username = None
        self.clarity_password = None
        self.clarity_domain = None
        self.load_config()

    def load_config(self):
        """Cargar configuraci√≥n desde archivo"""
        try:
            with open(CONFIG_FILE, 'r') as f:
                config = json.load(f)
                self.api_key = config.get('api_key')
                self.freshdesk_domain = config.get('freshdesk_domain')
                self.clarity_username = config.get('clarity_username')
                self.clarity_password = config.get('clarity_password')
                self.clarity_domain = config.get('clarity_domain')
        except FileNotFoundError:
            # Valores por defecto
            self.api_key = None
            self.freshdesk_domain = None
            self.clarity_username = None
            self.clarity_password = None
            self.clarity_domain = None

    def save_config(self):
        """Guardar configuraci√≥n en archivo"""
        config = {
            'api_key': self.api_key,
            'freshdesk_domain': self.freshdesk_domain,
            'clarity_username': self.clarity_username,
            'clarity_password': self.clarity_password,
            'clarity_domain': self.clarity_domain
        }
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=4)

    def ingresar_datos(self):
        """Interfaz para ingresar datos de conexi√≥n"""
        while True:
            print("\n=== CONFIGURACI√ìN DE CONEXI√ìN ===")
            print("1. Ingresar/Modificar API Key Freshdesk")
            print("2. Ingresar palabra clave de Dominio Freshdesk")
            print("3. Ingresar Credenciales Clarity")
            print("4. Ingresar palabra clave de Dominio Clarity")
            print("5. Configurar Dominios Manualmente")
            print("6. Ver configuraci√≥n actual")
            print("7. üìÅ Cargar configuraci√≥n desde archivo TXT")  # NUEVA OPCI√ìN
            print("0. Volver")
            
            opcion = input("Seleccione una opci√≥n: ").strip()

            if opcion == "1":
                self.api_key = input("üëâ Ingrese la API Key Freshdesk: ").strip()
                self.save_config()
                print("‚úÖ API Key guardada.\n")

            elif opcion == "2":
                palabra_clave = input("üîë Ingrese la palabra clave de dominio Freshdesk (ej: 'GreenDay'): ").strip()
                if palabra_clave:
                    self.freshdesk_domain = f"https://{palabra_clave}.freshdesk.com"
                    self.save_config()
                    print(f"‚úÖ Dominio Freshdesk configurado: {self.freshdesk_domain}\n")
                else:
                    print("‚ùå Palabra clave inv√°lida.\n")

            elif opcion == "3":
                print("\nüîê CONFIGURACI√ìN CREDENCIALES CLARITY")
                self.clarity_username = input("üë§ Usuario Clarity: ").strip()
                self.clarity_password = input("üîê Contrase√±a Clarity: ").strip()
                self.save_config()
                print("‚úÖ Credenciales Clarity guardadas.\n")

            elif opcion == "4":
                print("\nüåê CONFIGURACI√ìN DOMINIO CLARITY POR PALABRA CLAVE")
                palabra_clave = input("üîë Ingrese la palabra clave de dominio Clarity (ej: 'GreenDay'): ").strip()
                if palabra_clave:
                    self.clarity_domain = f"https://pmservice.{palabra_clave}.com:8043/ppm/rest/v1"
                    self.save_config()
                    print(f"‚úÖ Dominio Clarity configurado: {self.clarity_domain}\n")
                else:
                    print("‚ùå Dominio inv√°lido.\n")

            elif opcion == "5":
                self.configurar_dominios_manualmente()

            elif opcion == "6":
                self.mostrar_configuracion()

            elif opcion == "7":  # NUEVA OPCI√ìN
                self.cargar_configuracion_desde_txt()

            elif opcion == "0":
                break
            else:
                print("‚ùå Opci√≥n inv√°lida.\n")

    def cargar_configuracion_desde_txt(self):
        """Cargar configuraci√≥n desde archivo de texto"""
        print("\nüìÅ CARGAR CONFIGURACI√ìN DESDE ARCHIVO TXT")
        print("‚ïê" * 50)
        
        # Mostrar formato esperado
        self._mostrar_formato_txt()
        
        print("\nüìù Seleccione el archivo de configuraci√≥n (.txt):")
        ruta_archivo = FileUtils.seleccionar_archivo(
            "Seleccione el archivo de configuraci√≥n", 
            [("Archivos de texto", "*.txt")]
        )
        
        if not ruta_archivo:
            print("‚ùå No se seleccion√≥ ning√∫n archivo.")
            return False
        
        if not os.path.exists(ruta_archivo):
            print("‚ùå El archivo no existe.")
            return False
        
        try:
            config_data = self._leer_archivo_configuracion(ruta_archivo)
            if config_data:
                self._aplicar_configuracion_desde_txt(config_data)
                return True
            else:
                print("‚ùå No se pudo cargar la configuraci√≥n desde el archivo.")
                return False
                
        except Exception as e:
            print(f"‚ùå Error al cargar configuraci√≥n: {str(e)}")
            return False

    def _mostrar_formato_txt(self):
        """Mostrar el formato esperado para el archivo TXT"""
        print("üìã FORMATO ESPERADO DEL ARCHIVO TXT:")
        print("-" * 40)
        print("El archivo debe contener las siguientes l√≠neas:")
        print("")
        print("API_Freshdesk: tu_api_key_aqui")
        print("Freshdesk_domain: https://tudominio.freshdesk.com")
        print("Clarity_user: tu_usuario_clarity")
        print("Clarity_pass: tu_contrase√±a_clarity")
        print("Clarity_domain: https://pmservice.tudominio.com:##NUMERO##/ppm/rest/v1")
        print("")
        print("üí° NOTAS:")
        print("‚Ä¢ Las claves son sensibles a may√∫sculas/min√∫sculas")
        print("‚Ä¢ Los valores van despu√©s de los dos puntos")
        print("‚Ä¢ Se pueden incluir comentarios con # al inicio de la l√≠nea")
        print("‚Ä¢ Los espacios alrededor de los dos puntos son opcionales")
        print("-" * 40)

    def _leer_archivo_configuracion(self, ruta_archivo):
        """Leer y parsear archivo de configuraci√≥n TXT"""
        config_data = {}
        
        with open(ruta_archivo, 'r', encoding='utf-8') as f:
            lineas = f.readlines()
        
        for num_linea, linea in enumerate(lineas, 1):
            linea = linea.strip()
            
            # Saltar l√≠neas vac√≠as o comentarios
            if not linea or linea.startswith('#'):
                continue
            
            # Buscar separador de dos puntos
            if ':' not in linea:
                print(f"‚ö†Ô∏è  L√≠nea {num_linea} ignorada (formato incorrecto): {linea}")
                continue
            
            # Separar clave y valor
            partes = linea.split(':', 1)  # Dividir solo en el primer dos puntos
            clave = partes[0].strip()
            valor = partes[1].strip() if len(partes) > 1 else ""
            
            # Mapear claves del TXT a atributos internos
            mapeo_claves = {
                'API_Freshdesk': 'api_key',
                'Freshdesk_domain': 'freshdesk_domain', 
                'Clarity_user': 'clarity_username',
                'Clarity_pass': 'clarity_password',
                'Clarity_domain': 'clarity_domain'
            }
            
            if clave in mapeo_claves:
                config_data[mapeo_claves[clave]] = valor
                print(f"‚úÖ {clave} ‚Üí {valor}")
            else:
                print(f"‚ö†Ô∏è  Clave desconocida en l√≠nea {num_linea}: {clave}")
        
        return config_data

    def _aplicar_configuracion_desde_txt(self, config_data):
        """Aplicar la configuraci√≥n le√≠da desde el archivo TXT"""
        cambios_realizados = []
        
        if 'api_key' in config_data and config_data['api_key']:
            self.api_key = config_data['api_key']
            cambios_realizados.append("API Key Freshdesk")
        
        if 'freshdesk_domain' in config_data and config_data['freshdesk_domain']:
            self.freshdesk_domain = config_data['freshdesk_domain']
            cambios_realizados.append("Dominio Freshdesk")
        
        if 'clarity_username' in config_data and config_data['clarity_username']:
            self.clarity_username = config_data['clarity_username']
            cambios_realizados.append("Usuario Clarity")
        
        if 'clarity_password' in config_data and config_data['clarity_password']:
            self.clarity_password = config_data['clarity_password']
            cambios_realizados.append("Contrase√±a Clarity")
        
        if 'clarity_domain' in config_data and config_data['clarity_domain']:
            self.clarity_domain = config_data['clarity_domain']
            cambios_realizados.append("Dominio Clarity")
        
        if cambios_realizados:
            self.save_config()
            print(f"\n‚úÖ CONFIGURACI√ìN ACTUALIZADA EXITOSAMENTE")
            print("üìã Cambios aplicados:")
            for cambio in cambios_realizados:
                print(f"   ‚Ä¢ {cambio}")
            print(f"\nüíæ Configuraci√≥n guardada en: {CONFIG_FILE}")
        else:
            print("‚ÑπÔ∏è  No se realizaron cambios (valores vac√≠os o no reconocidos)")

    # Los dem√°s m√©todos permanecen igual...
    def configurar_dominios_manualmente(self):
        """Configurar dominios manualmente con URLs completas"""
        while True:
            print("\n=== CONFIGURACI√ìN MANUAL DE DOMINIOS ===")
            print("1. Configurar Dominio Freshdesk Manualmente")
            print("2. Configurar Dominio Clarity Manualmente")
            print("3. Ver dominios actuales")
            print("0. Volver")
            
            opcion = input("Seleccione una opci√≥n: ").strip()

            if opcion == "1":
                self._configurar_dominio_freshdesk_manual()

            elif opcion == "2":
                self._configurar_dominio_clarity_manual()

            elif opcion == "3":
                self.mostrar_dominios_actuales()

            elif opcion == "0":
                break
            else:
                print("‚ùå Opci√≥n inv√°lida.\n")

    def _configurar_dominio_freshdesk_manual(self):
        """Configurar dominio Freshdesk manualmente"""
        print("\nüåê CONFIGURACI√ìN MANUAL DOMINIO FRESHDESK")
        print("üí° Ejemplo: https://mitienda.freshdesk.com")
        
        # Mostrar dominio actual si existe
        if self.freshdesk_domain:
            print(f"üìå Dominio actual: {self.freshdesk_domain}")
        
        dominio_manual = input("üëâ Ingrese el dominio completo de Freshdesk: ").strip()
        
        if dominio_manual:
            # Validar formato b√°sico
            if not dominio_manual.startswith(('http://', 'https://')):
                dominio_manual = f"https://{dominio_manual}"
            
            # Advertencia si no contiene el dominio est√°ndar
            if '.freshdesk.com' not in dominio_manual:
                print("‚ö†Ô∏è  El dominio no contiene '.freshdesk.com'")
                confirmar = input("¬øDesea guardarlo de todas formas? (S/N): ").strip().upper()
                if confirmar != 'S':
                    return
            
            self.freshdesk_domain = dominio_manual
            self.save_config()
            print(f"‚úÖ Dominio Freshdesk configurado manualmente: {self.freshdesk_domain}\n")
        else:
            print("‚ùå Dominio inv√°lido.\n")

    def _configurar_dominio_clarity_manual(self):
        """Configurar dominio Clarity manualmente"""
        print("\nüåê CONFIGURACI√ìN MANUAL DOMINIO CLARITY")
        print("üí° Ejemplo: https://pmservice.ejemplo.com:8043/ppm/rest/v1")
        
        # Mostrar dominio actual si exists
        if self.clarity_domain:
            print(f"üìå Dominio actual: {self.clarity_domain}")
        
        dominio_manual = input("üëâ Ingrese el dominio completo de Clarity: ").strip()
        
        if dominio_manual:
            # Validar formato b√°sico
            if not dominio_manual.startswith(('http://', 'https://')):
                dominio_manual = f"https://{dominio_manual}"
            
            self.clarity_domain = dominio_manual
            self.save_config()
            print(f"‚úÖ Dominio Clarity configurado manualmente: {self.clarity_domain}\n")
        else:
            print("‚ùå Dominio inv√°lido.\n")

    def mostrar_dominios_actuales(self):
        """Mostrar solo la configuraci√≥n de dominios"""
        print("\n--- DOMINIOS ACTUALES ---")
        print(f"üåê Freshdesk: {self.freshdesk_domain if self.freshdesk_domain else '‚ùå No configurado'}")
        print(f"üåê Clarity: {self.clarity_domain if self.clarity_domain else '‚ùå No configurado'}")
        print("--------------------------")

    def mostrar_configuracion(self):
        """Mostrar configuraci√≥n actual"""
        print("\n--- Configuraci√≥n actual ---")
        print(f"üîë API Key Freshdesk: {'‚úÖ Cargada' if self.api_key else '‚ùå No configurada'}")
        print(f"üåê Dominio Freshdesk: {self.freshdesk_domain if self.freshdesk_domain else '‚ùå No configurado'}")
        print(f"üë§ Usuario Clarity: {self.clarity_username if self.clarity_username else '‚ùå No configurado'}")
        print(f"üîê Contrase√±a Clarity: {'‚úÖ Cargada' if self.clarity_password else '‚ùå No configurada'}")
        print(f"üåê Dominio Clarity: {self.clarity_domain if self.clarity_domain else '‚ùå No configurado'}")
        print("-----------------------------")

    def validar_configuracion(self):
        """Validar que la configuraci√≥n de Freshdesk est√© completa"""
        if not self.api_key or not self.freshdesk_domain:
            print("‚ö† Configuraci√≥n de Freshdesk incompleta. Use el men√∫ de configuraci√≥n primero.")
            return False
        return True

    def validar_configuracion_clarity(self):
        """Validar que la configuraci√≥n de Clarity est√© completa"""
        if not self.clarity_username or not self.clarity_password or not self.clarity_domain:
            print("‚ö† Configuraci√≥n de Clarity incompleta. Use el men√∫ de configuraci√≥n.")
            return False
        return True